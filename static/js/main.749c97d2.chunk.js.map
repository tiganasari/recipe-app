{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","url","image","ingredients","className","src","class","map","ingredient","text","href","target","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","placeholder","recipe","label","calories","dietLabels","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAmBeA,EAjBA,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAQC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACjC,OACI,sBAAKC,UAAU,SAAf,UACI,qBAAKC,IAAKH,IACV,oBAAII,MAAM,eAAV,SAA0BN,IAC1B,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,mBAAGC,KAAMT,EAAKU,OAAO,SAArB,2BC6DGC,G,MArEH,WAGV,IAHgB,EAQcC,mBAAS,IARvB,mBAQTC,EARS,KAQAC,EARA,OASYF,mBAAS,IATrB,mBASTG,EATS,KASDC,EATC,OAUUJ,mBAAS,IAVnB,mBAUTK,EAVS,KAUFC,EAVE,KAYhBC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAdf,WAce,oBAbd,qCAYG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAmBhB,OACE,sBAAKvB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACG,qBAAKA,UAAU,UAAf,SACA,yDAED,oBAAIA,UAAU,OAAd,2OAEH,uBAAM0B,SAdS,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAWkBb,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa6B,KAAK,OAAOC,MAAOlB,EAAQmB,SApBzC,SAAAJ,GACnBd,EAAUc,EAAEpB,OAAOuB,QAmBiEE,YAAY,2BAE7F,wBAAQhC,UAAU,gBAAgB6B,KAAK,SAAvC,4BAIF,qBAAK7B,UAAU,UAAf,SACAU,EAAQP,KAAI,SAAA8B,GAAM,OACjB,cAAC,EAAD,CAEArC,MAAOqC,EAAOA,OAAOC,MACrBC,SAAUF,EAAOA,OAAOE,SACxBD,MAAOD,EAAOA,OAAOG,WACrBvC,IAAKoC,EAAOA,OAAOpC,IACnBC,MAAOmC,EAAOA,OAAOnC,MACrBC,YAAakC,EAAOA,OAAOlC,aANtBkC,EAAOA,OAAOC,iBC7CVG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.749c97d2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Recipe = ({title , url, image, ingredients}) => {\n    return(\n        <div className=\"recipe\">\n            <img src={image}></img>\n            <h1 class=\"recipe-title\">{title}</h1>\n            <ul>\n                {ingredients.map(ingredient =>(\n                    <li>{ingredient.text}</li>  \n                ))}\n            </ul>\n            <a href={url} target=\"_blank\">make this</a>\n           \n           \n        </div>\n    )\n}\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n\n\n  const APP_ID = '0346e7d0';\n  const APP_KEY = 'b087565973e9e485c22c11879174743c';\n\n  // const exampleReq = `https://api.edamam.com/search?q=chicken&app_id=0346e7d0&app_key=b087565973e9e485c22c11879174743c`;\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('')\n  \n  useEffect( () => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits)\n\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    \n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('')\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n         <div className=\"heading\">\n         <h1> What to cook today? </h1>\n        </div>\n        <h3 className=\"para\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo </h3> \n      \n     <form onSubmit={getSearch} className=\"search-form\">\n       <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch} placeholder=\"enter ingredients here\"></input>\n       \n       <button className=\"search-button\" type=\"submit\">  search\n       </button>\n     </form> \n     </div>\n     <div className=\"recipes\"> \n    {recipes.map(recipe => (\n      <Recipe \n      key={recipe.recipe.label}\n      title={recipe.recipe.label} \n      calories={recipe.recipe.calories}\n      label={recipe.recipe.dietLabels}\n      url={recipe.recipe.url} \n      image={recipe.recipe.image}\n      ingredients={recipe.recipe.ingredients}/>\n\n\n    ))}\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}